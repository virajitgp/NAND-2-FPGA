$date
	Sun Mar 23 00:18:21 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module alu_tb $end
$var wire 1 ! zero_flag $end
$var wire 16 " result [15:0] $end
$var wire 1 # overflow_flag $end
$var wire 1 $ carry_flag $end
$var reg 16 % a [15:0] $end
$var reg 16 & b [15:0] $end
$var reg 4 ' op_code [3:0] $end
$scope module dut $end
$var wire 16 ( a [15:0] $end
$var wire 16 ) b [15:0] $end
$var wire 4 * op_code [3:0] $end
$var parameter 4 + ADD $end
$var parameter 4 , AND $end
$var parameter 4 - CMPEQ $end
$var parameter 4 . CMPLE $end
$var parameter 4 / CMPLT $end
$var parameter 4 0 MUL $end
$var parameter 4 1 NOT $end
$var parameter 4 2 OR $end
$var parameter 4 3 SHL $end
$var parameter 4 4 SHR $end
$var parameter 4 5 SUB $end
$var parameter 4 6 XOR $end
$var reg 1 $ carry_flag $end
$var reg 32 7 mul_temp [31:0] $end
$var reg 1 # overflow_flag $end
$var reg 16 8 result [15:0] $end
$var reg 17 9 temp [16:0] $end
$var reg 1 ! zero_flag $end
$upscope $end
$scope task display_result $end
$var reg 1 : expected_carry $end
$var reg 1 ; expected_overflow $end
$var reg 16 < expected_result [15:0] $end
$var reg 1 = expected_zero $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100 6
b1 5
b111 4
b110 3
b11 2
b101 1
b1011 0
b1001 /
b1010 .
b1000 -
b10 ,
b0 +
$end
#0
$dumpvars
x=
bx <
x;
x:
b101110111000 9
b101110111000 8
bx 7
b0 *
b11111010000 )
b1111101000 (
b0 '
b11111010000 &
b1111101000 %
0$
0#
b101110111000 "
0!
$end
#10000
0;
0:
0=
b101110111000 <
#11000
1$
b1000101110000 "
b1000101110000 8
b10001000101110000 9
b111010100110000 &
b111010100110000 )
b1001110001000000 %
b1001110001000000 (
#21000
1:
b1000101110000 <
#22000
1#
b1000000000000000 "
b1000000000000000 8
b1000000000000000 9
0$
b1 &
b1 )
b111111111111111 %
b111111111111111 (
#32000
1;
0:
b1000000000000000 <
#33000
b101110111000 "
b101110111000 8
b101110111000 9
0#
b1 '
b1 *
b11111010000 &
b11111010000 )
b1001110001000 %
b1001110001000 (
#43000
0;
b101110111000 <
#44000
1$
b1111110000011000 "
b1111110000011000 8
b11111110000011000 9
b1111101000 %
b1111101000 (
#54000
1:
b1111110000011000 <
#55000
1#
b111111111111111 "
b111111111111111 8
b111111111111111 9
0$
b1 &
b1 )
b1000000000000000 %
b1000000000000000 (
#65000
1;
b111111111111111 <
#66000
1!
b0 "
b0 8
0#
b10 '
b10 *
b101010101010101 &
b101010101010101 )
b1010101010101010 %
b1010101010101010 (
#76000
0;
0:
1=
b0 <
#77000
b1111111111111111 "
b1111111111111111 8
0!
b11 '
b11 *
#87000
0=
b1111111111111111 <
#88000
b100 '
b100 *
#99000
b101010101010101 "
b101010101010101 8
b101 '
b101 *
b0 &
b0 )
#109000
b101010101010101 <
#110000
b100000000 "
b100000000 8
b110 '
b110 *
b1000 &
b1000 )
b1 %
b1 (
#120000
b100000000 <
#121000
b10000000 "
b10000000 8
b111 '
b111 *
b1000000000000000 %
b1000000000000000 (
#131000
b10000000 <
#132000
b1 "
b1 8
b1000 '
b1000 *
b1111101000 &
b1111101000 )
b1111101000 %
b1111101000 (
#142000
b1 <
#143000
b1001 '
b1001 *
b111110100 %
b111110100 (
#154000
b1010 '
b1010 *
b1111101000 %
b1111101000 (
#165000
b1001110001000 "
b1001110001000 8
b1001110001000 7
b1011 '
b1011 *
b110010 &
b110010 )
b1100100 %
b1100100 (
#175000
b1001110001000 <
#176000
1$
b100001001000000 "
b100001001000000 8
b11110100001001000000 7
b1111101000 &
b1111101000 )
b1111101000 %
b1111101000 (
#186000
1:
b100001001000000 <
#187000
